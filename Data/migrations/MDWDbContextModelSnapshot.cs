// <auto-generated />
using System;
using MDW.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MDW.Data.migrations
{
    [DbContext(typeof(MDWDbContext))]
    partial class MDWDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Models.Drug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("company")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("dosetype")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("drugname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("genericnames")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("drugs");
                });

            modelBuilder.Entity("Models.DrugDonation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Donerid")
                        .HasColumnType("integer");

                    b.Property<int>("DrugId")
                        .HasColumnType("integer");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Donerid");

                    b.HasIndex("DrugId");

                    b.ToTable("drugsDonations");
                });

            modelBuilder.Entity("Models.DrugRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AskedUserid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Donerid")
                        .HasColumnType("integer");

                    b.Property<int>("DrugId")
                        .HasColumnType("integer");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AskedUserid");

                    b.HasIndex("Donerid");

                    b.HasIndex("DrugId");

                    b.ToTable("drugsRequests");
                });

            modelBuilder.Entity("Models.MoneyDonation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Donerid")
                        .HasColumnType("integer");

                    b.Property<int>("MoneyAmount")
                        .HasColumnType("integer");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Donerid");

                    b.ToTable("moneyDonations");
                });

            modelBuilder.Entity("Models.MoneyRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AskedUserid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Donerid")
                        .HasColumnType("integer");

                    b.Property<int>("MoneyAmount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AskedUserid");

                    b.HasIndex("Donerid");

                    b.ToTable("moneyRequests");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("phonenumber")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Models.DrugDonation", b =>
                {
                    b.HasOne("Models.User", "Doner")
                        .WithMany()
                        .HasForeignKey("Donerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doner");

                    b.Navigation("Drug");
                });

            modelBuilder.Entity("Models.DrugRequest", b =>
                {
                    b.HasOne("Models.User", "AskedUser")
                        .WithMany()
                        .HasForeignKey("AskedUserid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.User", "Doner")
                        .WithMany()
                        .HasForeignKey("Donerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AskedUser");

                    b.Navigation("Doner");

                    b.Navigation("Drug");
                });

            modelBuilder.Entity("Models.MoneyDonation", b =>
                {
                    b.HasOne("Models.User", "Doner")
                        .WithMany()
                        .HasForeignKey("Donerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doner");
                });

            modelBuilder.Entity("Models.MoneyRequest", b =>
                {
                    b.HasOne("Models.User", "AskedUser")
                        .WithMany()
                        .HasForeignKey("AskedUserid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.User", "Doner")
                        .WithMany()
                        .HasForeignKey("Donerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AskedUser");

                    b.Navigation("Doner");
                });
#pragma warning restore 612, 618
        }
    }
}
